# NeuroCognitive Architecture (NCA) Pre-commit Configuration
# This file configures pre-commit hooks to ensure code quality, consistency, and security
# before commits are made to the repository.
#
# Usage:
#   1. Install pre-commit: pip install pre-commit
#   2. Install the hooks: pre-commit install
#   3. (Optional) Run against all files: pre-commit run --all-files
#
# For more information: https://pre-commit.com/

default_language_version:
  python: python3.10

repos:
  # Standard pre-commit hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
        description: Trims trailing whitespace
        exclude: ^docs/.*\.md$
      - id: end-of-file-fixer
        description: Ensures files end with a newline
      - id: check-yaml
        description: Validates YAML syntax
      - id: check-json
        description: Validates JSON syntax
      - id: check-toml
        description: Validates TOML syntax
      - id: check-added-large-files
        description: Prevents giant files from being committed
        args: ['--maxkb=500']
      - id: check-merge-conflict
        description: Checks for files with merge conflict strings
      - id: check-case-conflict
        description: Checks for files with names that would conflict on case-insensitive filesystems
      - id: detect-private-key
        description: Detects private keys
      - id: mixed-line-ending
        description: Normalizes line endings
        args: ['--fix=lf']
      - id: check-executables-have-shebangs
        description: Ensures executable files have shebangs
      - id: check-shebang-scripts-are-executable
        description: Ensures shebang scripts are executable

  # Python code formatting with Black
  - repo: https://github.com/psf/black
    rev: 23.3.0
    hooks:
      - id: black
        description: Python code formatter
        args: [--line-length=100]
        types: [python]

  # Python import sorting with isort
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        description: Sort Python imports
        args: [--profile=black, --line-length=100]
        types: [python]

  # Python code linting with flake8
  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        description: Python linter
        additional_dependencies:
          - flake8-docstrings==1.7.0
          - flake8-bugbear==23.5.9
          - flake8-comprehensions==3.13.0
          - flake8-simplify==0.20.0
        args: [--max-line-length=100, --extend-ignore=E203]
        types: [python]

  # Python type checking with mypy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.3.0
    hooks:
      - id: mypy
        description: Static type checker for Python
        additional_dependencies:
          - types-requests
          - types-PyYAML
          - pydantic
        args: [--ignore-missing-imports, --disallow-untyped-defs, --disallow-incomplete-defs]
        types: [python]

  # Security scanning with Bandit
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        description: Security linter for Python code
        args: [--recursive, --exclude=tests/]
        types: [python]

  # Check for secrets and credentials
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        description: Detects secrets in the codebase
        args: ['--baseline', '.secrets.baseline']
        exclude: poetry.lock

  # Check for debugging statements
  - repo: https://github.com/pre-commit/pygrep-hooks
    rev: v1.10.0
    hooks:
      - id: python-check-blanket-noqa
        description: Enforce specific noqa codes
      - id: python-no-eval
        description: Prevent use of eval() function
      - id: python-no-log-warn
        description: Prevent use of deprecated .warn() method
      - id: python-use-type-annotations
        description: Encourage type annotations over type comments

  # Check for broken symlinks
  - repo: meta
    hooks:
      - id: check-hooks-apply
        description: Verify that the pre-commit hooks apply to at least one file
      - id: check-useless-excludes
        description: Verify that exclude patterns are actually used

  # Docker linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint
        description: Lint Dockerfile
        args: ['--ignore=DL3008', '--ignore=DL3013']

  # YAML linting
  - repo: https://github.com/adrienverge/yamllint.git
    rev: v1.32.0
    hooks:
      - id: yamllint
        description: Lint YAML files
        args: [--strict, -c=.yamllint]

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.35.0
    hooks:
      - id: markdownlint
        description: Lint Markdown files
        args: [--config=.markdownlint.yaml]
        exclude: ^CHANGELOG\.md$

  # Validate GitHub workflows
  - repo: https://github.com/python-jsonschema/check-jsonschema
    rev: 0.23.3
    hooks:
      - id: check-github-workflows
        description: Validate GitHub workflow files

  # Validate dependencies for security issues
  - repo: https://github.com/pyupio/safety
    rev: 2.3.5
    hooks:
      - id: safety
        description: Check Python dependencies for security vulnerabilities
        args: [check, --full-report]

  # Local hooks
  - repo: local
    hooks:
      - id: pytest
        name: Run pytest
        description: Run pytest on changed files
        entry: python -m pytest
        language: system
        pass_filenames: false
        always_run: true
        stages: [push]

      - id: check-version-updated
        name: Check version updated
        description: Ensure version is updated in pyproject.toml when modifying core files
        entry: python scripts/check_version_updated.py
        language: system
        pass_filenames: false
        stages: [push]
        files: ^(core/|memory/|integration/)